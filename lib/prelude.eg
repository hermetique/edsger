import base

# basic combinators

a b instead ≡ b

a del ≡

a dup ≡ a a

a b swap ≡ b a

f function 1 rep ≡ f .
f function n integer rep ≡ f . f (n 1 -) rep

0 base ind function nat-rec ≡ base
n integer base ind function nat-rec ≡ (n 1 -) base ind nat-rec n ind .

a b f function to-both ≡ (a f .) (b f .)

# primitive data types

data list ≡ nil | init last cons
data tagged-union ≡ _ _ :

# list operations

lcons ≡ nil swap cons swap ++

nil head ≡ "head of empty list" fail
nil a cons head ≡ a
a b cons head ≡ a head

nil tail ≡ "tail of empty list" fail
nil a cons tail ≡ nil
a b cons tail ≡ a tail b cons

# packing and unpacking strings

"" →list ≡ nil
a string →list ≡ (a init →list) (a last) cons

nil →string ≡ ""
(a b string cons) →string ≡ a →string b ++

# pretty printer (show)

a integer show ≡ a number show ≡ a "" bytecode 21
a string show ≡ a

a b : show ≡ "(" a show ++ " " ++ b ++ ")" ++
nil show ≡ "nil"
a b cons show ≡ a show " " ++ b show ++

# ordering (compare)

data ordering ≡ LT | EQ | GT deriving show

for _ number _ number | _ string _ string
  compare ≡ cmp λ -1 → LT
                   0 → EQ
                   1 → GT
                   _ → "impossible: cmp failed" fail

a b string : c d string : compare ≡ b d compare λ EQ → a c compare; a → a

nil nil compare ≡ EQ
nil (_ _ cons) compare ≡ LT
(_ _ cons) nil compare ≡ GT
(a b cons) (c d cons) compare ≡ b d compare λ EQ → a c compare; a → a

for _ ordering _ ordering
  compare ≡ [→primitive] to-both compare

# predicates and conditionals

data bool ≡ true | false deriving show | compare

false not ≡ true
true not ≡ false

true true and ≡ true
_ bool _ bool and ≡ false

false false or ≡ false
_ bool _ bool or ≡ true

true b function c function ite ≡ b .
false b function c function ite ≡ c .

a b function when ≡ a b [] ite

a b function unless ≡ a [] b ite

for _ _
  < ≡ compare λ LT → true; _ → false
  > ≡ compare λ GT → true; _ → false

# equality (=)

for _ number _ number | _ string _ string | _ list _ list | _ tagged-union _ tagged-union
  = ≡ compare λ EQ → true; _ → false

for _ _
  /= ≡ = not

# map

nil _ function map ≡ nil
a b cons f function map ≡ a f map (b f .) cons
a b : f function map ≡ a f map b : primitive→

# basic data types

data pair ≡ fst snd , deriving show | compare | = | f map
data option ≡ nothing | from-itself itself deriving show | compare | = | f map
data either ≡ from-left left | from-right right deriving show | compare | = | f map

# semigroup

for _ string _ string
  <> ≡ ++

for _ number _ number
  <> ≡ +

a function b function <> ≡ [a . b .]

for _ bool _ bool
  <> ≡ or

nothing nothing <> ≡ nothing _ itself <> ≡ _ itself nothing <> ≡ nothing
a itself b itself <> ≡ a b <> itself

a left _ <> ≡ _ a left <> ≡ a left
a right b right <> ≡ a b <> right

(a b ,) (c d ,) <> ≡ (a c <>) (b d <>) ,

nil a <> ≡ a nil <> ≡ a
a (b c cons) <> ≡ (a b <>) c cons 

# monoid

data mempty

mempty a ++ ≡ a mempty ++ ≡ a

for _ number _ number | _ function _ function | _ bool _ bool | _ pair _ pair | _ list _ list
  ++ ≡ <>

# foldable

nil a f function foldr ≡ a
t h cons a f function foldr ≡ t (h a f .) f foldr

nil a f function foldl ≡ a
t h cons a f function foldl ≡ (t a f foldl) h f .

"" a f function foldr ≡ a
s string a f function foldr ≡ s init (s last a f .) f foldr

"" a f function foldl ≡ a
s string a f function foldl ≡ (s init a f foldl) s last f .

concat ≡ mempty [++] foldr

length ≡ 0 [1 + instead] foldr

nil _ intersperse ≡ nil
nil a cons _ intersperse ≡ nil a cons
(a b cons) c intersperse ≡ (a c intersperse) c cons b cons

intercalate ≡ intersperse concat

# misc list operations (make lib/list.eg?)

nil f function filter ≡ nil
a b cons f function filter ≡ a f filter b f . [b cons] when

a list unpack ≡ (a go) (a length) where
  nil go ≡ 
  a b cons go ≡ a go b

for _ list
  reverse ≡ unpack λ len → nil [swap cons] len rep where
