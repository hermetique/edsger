import base

# tagged unions with optional accessors
data true | false
data nothing | _ itself
data nil | tail head cons
data _ leaf | left right branch

# convert to string
a integer show ≡ a number show ≡ a string show ≡ a "" bytecode 20
true show ≡ "true"
false show ≡ "false"
nothing show ≡ "nothing"
a itself show ≡ a show " itself" ++
a leaf show ≡ a show
a b branch show ≡ "(" a show ++ ", " ++ b show ++ ")" ++
nil show ≡ "[]"
t h cons show ≡ t show ":" ++ h ++

# structure preserving transformation
nothing f function map ≡ nothing
a itself f function map ≡ [a f .] itself
nil f function map ≡ nil
t h cons f function map ≡ [t f map] [h f .] cons
a leaf f function map ≡ [a f .] leaf
a b branch f function map ≡ [a f map] [b f map] branch

# check parity of a natural number
0 even? ≡ 1 odd? ≡ true
1 even? ≡ 0 odd? ≡ false
n even? ≡ [n 1 -] odd?
n odd? ≡ [n 1 -] even?

# some computations
do
  3 itself (1 +) map (2 /) map show
  1 leaf 2 leaf branch 3 leaf 4 leaf branch branch 5 leaf branch (2 *) map show
