import prelude

data leaf | _ _ _ _ node

# insert

leaf k a insert ≡ leaf k a leaf node
(l k' a' r node) k a insert ≡
  k' k = λ true → l k' a' r node
           false → k' k > λ true → (l k a insert) k' a' r node
                            false → l k' a' (r k a insert) node

# construct from list of pairs

nil from-list ≡ leaf
t (k a pair) cons from-list ≡ (t from-list) k a insert

# find

leaf k find ≡ nothing
(l k' a' r node) k find ≡
  k' k = λ true → a' itself
           false → k' k > λ true → l k find
                            false → r k find

# update

leaf k _ function adjust ≡ leaf
(l k' a' r node) k f function adjust ≡
  k' k = λ true → l k' (a' f .) r node
           false → k' k > λ true → (l k f adjust) k' a' r node
                            false → l k' a' (r k f adjust) node

a update ≡ [a instead] adjust

# map

leaf _ function map ≡ leaf
(l k a r node) f function map ≡ (l f map) k (a f .) (r f map) node
