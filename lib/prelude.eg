import base

# basic combinators

a b instead ≡ b

a del ≡

a dup ≡ a a

a b swap ≡ b a

f 1 rep ≡ f .
f n integer rep ≡ f . f n 1 - rep

0 base ind nat-rec ≡ base
n integer base ind nat-rec ≡ [n 1 -] base ind nat-rec n ind .

# data types

data true | false
data nothing | _ itself
data _ left | _ right
data nil | tail head cons

# pretty printer

a integer show ≡ a number show ≡ a "" bytecode 20
a string show ≡ a
true show ≡ "true"
false show ≡ "false"
nothing show ≡ "nothing"
a itself show ≡ a show " itself" ++
a left show ≡ a show " left" ++
a right show ≡ a show " right" ++
nil show ≡ "[]"
a b cons show ≡ a show ":" ++ b show ++

# map

nothing f map ≡ nothing
a itself f map ≡ a f . itself
a left f map ≡ a left
a right f map ≡ a f . right
nil f map ≡ nil
a b cons f map ≡ a f map b f . cons

# predicates

0 num->bool ≡ false
a number num->bool ≡ true

false not ≡ true
true not ≡ false

true true and ≡ true
_ _ and ≡ false

false false or ≡ false
_ _ or ≡ true

/= ≡ - num->bool
= ≡ /= not

# conditionals

true b c ite ≡ b .
false b c ite ≡ c .

a b when ≡ a b () ite

a b unless ≡ a () b ite

# filter

nil f filter ≡ nil
a b cons f filter ≡ a f filter b f . (b cons) when

# folds

nil a f foldr ≡ a
t h cons a f foldr ≡ t [h a f .] f foldr

nil a f foldl ≡ a
t h cons a f foldl ≡ [t a f foldl] h f .
