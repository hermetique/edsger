import prelude

data expr ≡ _ num
          | _ str
          | _ par
          | _ abs
          | _ norm
          | _ _ pow
          | _ _ frac
          | _ _ mul
          | _ _ div
          | _ _ add
          | _ _ sub
          | _ _ eqn
          | _ _ int
          | _ _ der

for _ number
  latex ≡ num

for _ string
  latex ≡ str

for _ expr _ expr
  + ≡ add
  * ≡ mul
  - ≡ sub
  ^ ≡ pow
  / ≡ frac
  = ≡ eqn

# lowest number = highest precedence

_ num precedence ≡ _ str precedence ≡ _ par precedence ≡ _ abs precedence ≡ _ norm precedence ≡ 0
_ _ pow precedence ≡ 10
_ _ mul precedence ≡ _ _ frac precedence ≡ _ _ div precedence ≡ 20
_ _ add precedence ≡ _ _ sub precedence ≡ 30
_ _ int precedence ≡ _ _ der precedence ≡ 40
_ _ eqn precedence ≡ 50

# add parentheses wherever necessary

for _ num | _ str
  parenthesize ≡ ()

a par parenthesize ≡ a abs parenthesize
                   ≡ a norm parenthesize
                   ≡ a parenthesize

n ctr parenthesize-by-precedence ≡ [dup precedence n > [par] when] to-both ctr .

a b pow `c parenthesize ≡ a b c precedence [pow] parenthesize-by-precedence
a b frac `c parenthesize ≡ a parenthesize b parenthesize frac
a b mul `c parenthesize ≡ a b c precedence [mul] parenthesize-by-precedence
a b div `c parenthesize ≡ a b c precedence [div] parenthesize-by-precedence
a b add `c parenthesize ≡ a b c precedence [add] parenthesize-by-precedence
a b sub `c parenthesize ≡ a b c precedence [sub] parenthesize-by-precedence
a b eqn `c parenthesize ≡ a parenthesize b parenthesize eqn
a b int `c parenthesize ≡ a parenthesize b parenthesize int
a b der `c parenthesize ≡ a parenthesize b parenthesize der

# convert to latex

a number num show ≡ a show
a string str show ≡ a
a par show ≡ "{(" a show ++ ")}" ++
a abs show ≡ "\\left|" a show ++ "\\right||" ++
a norm show ≡ "\\left\\lVert " a show ++ "\\right\\rVert" ++
a b pow show ≡ a show "^" ++ b show ++
a b frac show ≡ "\\frac{" a show ++ "}{" ++ b show ++ "}" ++
a num b num mul show ≡ a show "\\cdot " ++ b show ++
a b mul show ≡ a show " " ++ b show ++
a b div show ≡ a show "/" ++ b show ++
a b add show ≡ a show "+" ++ b show ++
a b sub show ≡ a show "-" ++ b show ++
a b eqn show ≡ a show "=" ++ b show ++
a b int show ≡ "\\int " a show ++ "\\mathrm{d}" ++ b show ++
a b der show ≡ "\\frac{\\mathrm{d}}{\\mathrm{d}" b show ++ "}" ++ a show ++

# expander

for _ expr
  expand ≡ parenthesize show
